{"is_valid": false, "question": "# Clock Generator Module\n\nDesign a Verilog module that generates a continuous clock signal with a configurable period. The module should meet the following specifications:\n\n## Interface\n- Output: `clk` (1-bit register) - The generated clock signal\n\n## Parameters\n- `PERIOD` (default 10 time units) - The total period of the clock signal (both high and low phases)\n\n## Requirements\n1. The clock should start low (0) when simulation begins\n2. The clock should toggle its value every half period (PERIOD/2)\n3. The toggling should continue indefinitely\n4. The clock transitions should be precise with respect to the specified period\n\n## Notes\n- Use time units consistently (don't mix ns/ps/etc)\n- The solution should not depend on any external signals or clocks\n- The module should be self-contained and not require any input signals\n\nWrite a Verilog module that meets these specifications exactly."}
{"is_valid": false, "question": "Design a Verilog module that compares two 3-bit unsigned numbers and outputs three status signals indicating their relative magnitude. \n\nThe module should have:\n- Two 3-bit unsigned inputs: A and B\n- Three 1-bit outputs:\n  * A_greater: high when A > B\n  * A_equal: high when A == B\n  * A_less: high when A < B\n\nAll outputs should be combinational (continuously assigned) and update immediately when either input changes. The comparison should treat all inputs as unsigned binary numbers.\n\nFor example:\n- If A = 3'b101 (5) and B = 3'b011 (3), then:\n  A_greater = 1, A_equal = 0, A_less = 0\n- If A = 3'b010 (2) and B = 3'b010 (2), then:\n  A_greater = 0, A_equal = 1, A_less = 0\n- If A = 3'b001 (1) and B = 3'b100 (4), then:\n  A_greater = 0, A_equal = 0, A_less = 1\n\nThe module should be purely combinational with no clock or reset inputs."}
{"is_valid": false, "question": "Design a Verilog module that implements an 8-bit shift register with serial input and parallel output. The module should have the following interface and behavior:\n\nInputs:\n- clk: Clock signal (positive edge triggered)\n- d: Serial data input (1-bit)\n\nOutputs:\n- q: 8-bit parallel output\n\nFunctionality:\n1. On every positive clock edge, the register should perform a right shift operation (LSB is discarded)\n2. The current value of input 'd' should be loaded into the MSB (bit 7) of the register\n3. The register should initialize to all zeros (0x00) when simulation begins\n\nTiming Requirements:\n- All operations must be synchronous to the positive edge of the clock\n- Output 'q' must be updated on the clock edge (use non-blocking assignment)\n\nExample Operation:\nInitial state: q = 8'b00000000\nAfter 1st clock with d=1: q = 8'b10000000\nAfter 2nd clock with d=0: q = 8'b01000000\nAfter 3rd clock with d=1: q = 8'b10100000\n\nDo not use any asynchronous resets or preset signals."}
