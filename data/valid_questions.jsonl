{"is_valid": false, "question": "# Clock Generator Module\n\nDesign a Verilog module that generates a continuous clock signal with a configurable period. The module should meet the following specifications:\n\n## Interface\n- Output: `clk` (1-bit register) - The generated clock signal\n\n## Parameters\n- `PERIOD` (default 10 time units) - The total period of the clock signal (high + low time)\n\n## Requirements\n1. The clock should start low (0) when simulation begins\n2. The clock should toggle every half period (PERIOD/2)\n3. The toggling should continue indefinitely\n4. The clock transitions should be precise with respect to the specified period\n\n## Notes\n- Assume time units are consistent throughout the simulation\n- The module should not require any input signals\n- Do not use any initial delay before starting the clock\n- The implementation should be synthesizable\n\nThe module should be named `dut` with exactly the interface and behavior described above."}
{"is_valid": false, "question": "Design a Verilog module that compares two 3-bit unsigned numbers and outputs three status flags indicating their relationship. The module should have the following interface:\n\nInputs:\n- A: 3-bit unsigned number\n- B: 3-bit unsigned number\n\nOutputs:\n- A_greater: High when A > B\n- A_equal: High when A == B\n- A_less: High when A < B\n\nAll outputs should be combinational (continuously assigned) and update immediately when either input changes. Only one output should be high at any given time. The comparison should treat both inputs as unsigned binary numbers.\n\nThe module should be purely combinational with no clock or reset inputs. All outputs must be mutually exclusive (exactly one output high for any input combination)."}
{"is_valid": false, "question": "Design a Verilog module that implements an 8-bit shift register with serial input and parallel output. The module should have the following specifications:\n\nInputs:\n- clk: A clock signal (positive edge-triggered)\n- d: A 1-bit serial data input\n\nOutputs:\n- q: An 8-bit parallel output representing the current state of the shift register\n\nBehavior:\n1. On every positive clock edge, the register should perform a right shift operation (LSB is shifted out)\n2. The MSB (bit 7) should be loaded with the current value of d during each shift operation\n3. The initial state of the register should be all zeros (8'b00000000)\n4. All other bits should maintain their relative positions during the shift operation\n\nThe module should be synchronous and respond only to positive clock edges. No asynchronous reset or preset functionality is required.\n\nExample Operation:\nInitial state: q = 00000000\nAfter 1st clock with d=1: q = 10000000\nAfter 2nd clock with d=0: q = 01000000\nAfter 3rd clock with d=1: q = 10100000"}
