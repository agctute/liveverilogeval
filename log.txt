```verilog
module lfsr_64bit (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        Q <= 64'h0;
    end
    else begin
        Q <= {Q[0] ? 1'b0 : 1'b1, Q[63:1]};
    end
end

endmodule
```
```verilog
module lfsr_64bit (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        Q <= 64'b0;
    end
    else begin
        if (Q[0] == 1'b0) begin
            Q <= {1'b1, Q[63:1]};
        end
        else begin
            Q <= {1'b0, Q[63:1]};
        end
    end
end

endmodule
```
```verilog
module dut (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        Q <= 64'b0;
    end
    else begin
        if (Q[0] == 1'b0) begin
            Q <= {1'b1, Q[63:1]};
        end
        else begin
            Q <= {1'b0, Q[63:1]};
        end
    end
end

endmodule
```
```verilog
module lfsr (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        Q <= 64'b0;
    end
    else begin
        if (Q[0] == 1'b0) begin
            Q <= {1'b1, Q[63:1]};
        end
        else begin
            Q <= {1'b0, Q[63:1]};
        end
    end
end

endmodule
```
```verilog
module lfsr_64bit (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk) begin
    if (!rst_n) begin
        Q <= 64'b0;
    end
    else begin
        if (Q[0] == 1'b0) begin
            Q <= {1'b1, Q[63:1]};
        end
        else begin
            Q <= {1'b0, Q[63:1]};
        end
    end
end

endmodule
```


module dut
(
  input clk,
  input rst_n,
  output reg [63:0] Q
);


  always @(posedge clk) begin
    if(!rst_n) begin
      Q <= 64'b0;
    end else begin
      if(Q[0] == 1'b0) begin
        Q <= { 1'b1, Q[63:1] };
      end else begin
        Q <= { 1'b0, Q[63:1] };
      end
    end
  end


endmodule


```verilog
module lfsr_64bit (
    input clk,
    input rst_n,
    output reg [63:0] Q
);

always @(posedge clk) begin
    if (!rst_n) begin
        Q <= 64'b0;
    end
    else begin
        if (Q[0] == 1'b0) begin
            Q <= {1'b1, Q[63:1]};
        end
        else begin
            Q <= {1'b0, Q[63:1]};
        end
    end
end

endmodule
```


module dut
(
  input clk,
  input rst_n,
  output reg [63:0] Q
);


  always @(posedge clk) begin
    if(!rst_n) begin
      Q <= 64'b0;
    end else begin
      if(Q[0] == 1'b0) begin
        Q <= { 1'b1, Q[63:1] };
      end else begin
        Q <= { 1'b0, Q[63:1] };
      end
    end
  end


endmodule


